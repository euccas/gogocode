<map version="1.0.1">
<!-- To view this file, download free mind mapping software FreeMind from http://freemind.sourceforge.net -->
<node CREATED="1528751876702" ID="ID_1681119742" MODIFIED="1529113771711" TEXT="Learn Golang">
<node BACKGROUND_COLOR="#ff6666" CREATED="1529113636862" ID="ID_1392524304" MODIFIED="1529455110331" POSITION="right" TEXT="Go Compiler">
<edge COLOR="#ff6666"/>
<font NAME="SansSerif" SIZE="14"/>
<node CREATED="1529455135763" ID="ID_129980111" MODIFIED="1529455142611" TEXT="Go version"/>
<node CREATED="1529455178791" ID="ID_1996861135" MODIFIED="1529455228906" TEXT="Go syntax"/>
<node CREATED="1529455116243" ID="ID_1989694809" MODIFIED="1529455224863" TEXT="Go tools">
<node CREATED="1529441510552" ID="ID_1307247692" MODIFIED="1529441513710" TEXT="go tool"/>
<node CREATED="1529441515387" ID="ID_1861735337" MODIFIED="1529441517128" TEXT="go get">
<node CREATED="1529441537527" ID="ID_1439931416" MODIFIED="1529441542334" TEXT="install go packages"/>
</node>
</node>
<node CREATED="1529455187542" ID="ID_1992083828" MODIFIED="1529455199355" TEXT="Execution"/>
<node CREATED="1529455202863" ID="ID_1630539751" MODIFIED="1529455204867" TEXT="Debug"/>
<node CREATED="1529455235382" ID="ID_40696501" MODIFIED="1529455237700" TEXT="IDE"/>
</node>
<node BACKGROUND_COLOR="#ffcc00" CREATED="1529113646332" ID="ID_1965421542" MODIFIED="1529455014151" POSITION="right" TEXT="Data Type">
<edge COLOR="#ffcc00"/>
<font NAME="SansSerif" SIZE="14"/>
<node CREATED="1529445079511" ID="ID_1885471656" MODIFIED="1529445121915" TEXT="Bool type">
<node CREATED="1529445190068" ID="ID_117921242" MODIFIED="1529445196970" TEXT="bool">
<node CREATED="1529445200529" ID="ID_59495010" MODIFIED="1529445206555" TEXT="true, false"/>
</node>
</node>
<node CREATED="1529446703114" ID="ID_1537052937" MODIFIED="1529446709861" TEXT="Numeric type">
<node CREATED="1529446678725" ID="ID_1862938124" MODIFIED="1529446747821" TEXT="Integers">
<node CREATED="1529445211601" ID="ID_644203424" MODIFIED="1529445228195" TEXT="int, int8, int16, int32, int64"/>
<node CREATED="1529445232408" ID="ID_994509323" MODIFIED="1529445244772" TEXT="uint, uint8, uint16, uint32, uint64, uintptr"/>
<node CREATED="1529445246137" ID="ID_1857711808" MODIFIED="1529445254468" TEXT="byte (alias for uint8)"/>
<node CREATED="1529445257272" ID="ID_1572222531" MODIFIED="1529445272895" TEXT="rune (alias for int32, represents a Unicode code point)"/>
<node CREATED="1529446016482" ID="ID_347169078" MODIFIED="1529446902912" TEXT="int, uint, uintptr types are machine dependent types:&#xa; usually 32 bits wide on 32-bit systems, &#xa;and 64 bits wide on 64-bit systems"/>
<node CREATED="1529446065302" ID="ID_1823570682" MODIFIED="1529446109232" TEXT="Use int unless you have a specific reason &#xa;to use a sized or unsigned integer type"/>
</node>
<node CREATED="1529445105367" ID="ID_1822313247" MODIFIED="1529446734149" TEXT="Floating-point numbers">
<node CREATED="1529445301381" ID="ID_902421378" MODIFIED="1529445308485" TEXT="float32, float64">
<node CREATED="1529446974148" ID="ID_1286305718" MODIFIED="1529446983300" TEXT="NaN, for things like 0/0"/>
<node CREATED="1529446991069" ID="ID_1034094731" MODIFIED="1529447003297" TEXT="positive infinity"/>
<node CREATED="1529447003849" ID="ID_1652761905" MODIFIED="1529447012183" TEXT="negative infinity"/>
</node>
<node CREATED="1529445309536" ID="ID_780912416" MODIFIED="1529445316905" TEXT="complex64, complex128">
<node CREATED="1529445338576" ID="ID_1825494645" MODIFIED="1529445346789" TEXT="import &quot;math/cmplx&quot;"/>
<node CREATED="1529446191139" ID="ID_882792365" MODIFIED="1529446208915" TEXT="z complex128 - cmplx.Sqrt(-5 + 12i)"/>
</node>
<node CREATED="1529447041919" ID="ID_1218742417" MODIFIED="1529447050671" TEXT="Use float64 for most of the cases"/>
</node>
<node CREATED="1529446122028" ID="ID_294084553" MODIFIED="1529446163948" TEXT="fmt.Printf(&quot;Type: %T Value: %v&quot;, var, var)"/>
</node>
<node CREATED="1529445132750" FOLDED="true" ID="ID_125440844" MODIFIED="1529454983007" TEXT="String type">
<node CREATED="1529453929217" ID="ID_448731392" MODIFIED="1529453945645" TEXT="&quot;abc&quot;">
<node CREATED="1529453949444" ID="ID_1984629111" MODIFIED="1529453968253" TEXT="Use double-quotes &quot; &quot; only"/>
</node>
<node CREATED="1529454119403" ID="ID_48161644" MODIFIED="1529454139311" TEXT="Holds arbitrary bytes">
<node CREATED="1529454143759" ID="ID_866627424" MODIFIED="1529454166871" TEXT="Not encoded with any predefined format (Unicode, UTF8, etc.)"/>
</node>
<node CREATED="1529452520794" ID="ID_1913086381" MODIFIED="1529453994784" TEXT="Strings are immutable"/>
<node CREATED="1529452546910" ID="ID_1472148053" MODIFIED="1529452565106" TEXT="Length of a string: len(s)"/>
<node CREATED="1529452579700" ID="ID_646237651" MODIFIED="1529453205458" TEXT="Access string&apos;s bytes: s[i]">
<node CREATED="1529453212633" ID="ID_1137912597" MODIFIED="1529453240771" TEXT="Illegal to take the address of string element, like &amp;s[i]"/>
<node CREATED="1529453382646" ID="ID_520076298" MODIFIED="1529453402582" TEXT="Out of range access: runtime error"/>
</node>
<node CREATED="1529454226450" ID="ID_1338890643" MODIFIED="1529454229711" TEXT="Print strings">
<node CREATED="1529453716918" ID="ID_286161046" MODIFIED="1529454333908" TEXT="fmt.Println(s[1])  // print ASCII value"/>
<node CREATED="1529453682645" ID="ID_380775114" MODIFIED="1529454680842" TEXT="fmt.Printf(&quot;%c&quot;, s[1])  // print char, for only one byte"/>
<node CREATED="1529454304964" ID="ID_1840279503" MODIFIED="1529454724045" TEXT="fmt.Printf(&quot;%x&quot;, s)  // print bytes&apos; hex values"/>
<node CREATED="1529454689213" ID="ID_1409922541" MODIFIED="1529454711330" TEXT="fmt.Printf(&quot;% x&quot;, s)  // print bytes hex values, separate each byte"/>
<node CREATED="1529454365148" ID="ID_1600031147" MODIFIED="1529454741842" TEXT="fmt.Printf(&quot;%q&quot;, s)  // escape any non-printable byte sequences"/>
<node CREATED="1529454595997" ID="ID_1491925906" MODIFIED="1529454913554" TEXT="fmt.Printf(&quot;%+q&quot;, s)  // escape any non-printable byte sequences, &#xa;// and non-ASCII bytes, all while interpreting UTF8&#xa;"/>
</node>
</node>
<node CREATED="1529447081394" ID="ID_86688229" MODIFIED="1529447092320" TEXT="Zero values">
<node CREATED="1529447096673" ID="ID_759092935" MODIFIED="1529447110665" TEXT="Variables declared without an explicit initial value are given zero value"/>
<node CREATED="1529447111612" ID="ID_34116490" MODIFIED="1529447118311" TEXT="Numeric types: 0"/>
<node CREATED="1529447119116" ID="ID_1233381680" MODIFIED="1529447124989" TEXT="Boolean type: false"/>
<node CREATED="1529447125668" ID="ID_1816939919" MODIFIED="1529447133984" TEXT="String: &quot;&quot; (empty string)"/>
</node>
<node CREATED="1529447151685" ID="ID_1671481255" MODIFIED="1529447155056" TEXT="Type Conversion">
<node CREATED="1529448406352" ID="ID_477659898" MODIFIED="1529448431879" TEXT="In Go assignment between items of different type requires an explicit conversion"/>
<node CREATED="1529447184117" ID="ID_957114705" MODIFIED="1529447203855" TEXT="T(v): converts the value v to the type T"/>
<node CREATED="1529447214819" ID="ID_1576267107" MODIFIED="1529448332383" TEXT="var i int = 42&#xa;var f float64 = float64(i)&#xa;var u uint = uint(f)"/>
<node CREATED="1529447254470" ID="ID_170370292" MODIFIED="1529448321021" TEXT="i := 42&#xa;f := float64(i)&#xa;u := uint(f)"/>
</node>
</node>
<node BACKGROUND_COLOR="#3399ff" CREATED="1529445171239" ID="ID_661666673" MODIFIED="1529455297552" POSITION="right" TEXT="Data Structures">
<edge COLOR="#3399ff"/>
<font NAME="SansSerif" SIZE="14"/>
<node CREATED="1529453870924" ID="ID_376127249" MODIFIED="1529453873836" TEXT="Slice"/>
<node CREATED="1529452667428" ID="ID_843338280" MODIFIED="1529452670130" TEXT="Array"/>
<node CREATED="1529453115709" ID="ID_124741779" MODIFIED="1529453118127" TEXT="Map"/>
<node CREATED="1529452686534" ID="ID_1750523447" MODIFIED="1529452688929" TEXT="Struct"/>
<node CREATED="1529452702502" ID="ID_617970940" MODIFIED="1529452705274" TEXT="Interface"/>
</node>
<node BACKGROUND_COLOR="#00cc66" CREATED="1529113652771" ID="ID_1256472275" MODIFIED="1529455362401" POSITION="right" TEXT="Variables">
<edge COLOR="#00cc66"/>
<font NAME="SansSerif" SIZE="14"/>
<node CREATED="1529443996106" ID="ID_910354153" MODIFIED="1529443998730" TEXT="Naming">
<node CREATED="1529444083048" ID="ID_1303635544" MODIFIED="1529444095794" TEXT="Start with a letter"/>
<node CREATED="1529444097085" ID="ID_588918325" MODIFIED="1529444113290" TEXT="Contains letters, numbers, or the _ (underscore) symbol"/>
</node>
<node CREATED="1529443989299" ID="ID_456213346" MODIFIED="1529444830688" TEXT="Scope">
<node CREATED="1529444160075" ID="ID_570628321" MODIFIED="1529444164647" TEXT="Package variables"/>
<node CREATED="1529444165300" ID="ID_1321435413" MODIFIED="1529444168770" TEXT="Function variables"/>
<node CREATED="1529446273508" ID="ID_922645090" MODIFIED="1529446283303" TEXT="go is lexically scoped using blocks {}"/>
</node>
<node CREATED="1529443789855" ID="ID_1816543579" MODIFIED="1529444008632" TEXT="Declaration">
<node CREATED="1529443901690" ID="ID_1432381624" MODIFIED="1529443917345" TEXT="var variable_name variable_type"/>
<node CREATED="1529443930314" ID="ID_1688895453" MODIFIED="1529443943776" TEXT="var myvar1, myvar2, myvar3 variable_type"/>
<node CREATED="1529446494028" ID="ID_1657610353" MODIFIED="1529446560811" TEXT="var (&#xa;        a int = 5&#xa;        b int = 10&#xa;        c int = 15&#xa;)"/>
<node CREATED="1529444286458" ID="ID_1052576123" MODIFIED="1529444315947" TEXT="Initializers">
<node CREATED="1529444368982" ID="ID_195496976" MODIFIED="1529444381553" TEXT="var i, j int = 1, 2"/>
<node CREATED="1529444320217" ID="ID_1428707248" MODIFIED="1529444507987" TEXT="Type can be omitted, variable will &#xa;take the type of the initializer">
<node CREATED="1529444395427" ID="ID_378969505" MODIFIED="1529444495394" TEXT="var c, python, java = true, false, &quot;no!&quot;"/>
</node>
</node>
</node>
<node CREATED="1529443796779" ID="ID_382781388" MODIFIED="1529443801833" TEXT="Assignment">
<node CREATED="1529444841686" ID="ID_685946036" MODIFIED="1529444859920" TEXT="Explicit type">
<node CREATED="1529444890303" ID="ID_1024079268" MODIFIED="1529444892136" TEXT="=">
<node CREATED="1529445049292" ID="ID_1298056363" MODIFIED="1529445055483" TEXT="var i, j int = 1, 2"/>
</node>
</node>
<node CREATED="1529444860698" ID="ID_294219145" MODIFIED="1529444863567" TEXT="Implicit type">
<node CREATED="1529444883935" ID="ID_1737532674" MODIFIED="1529444886567" TEXT=":=">
<node CREATED="1529445015826" ID="ID_432991282" MODIFIED="1529445031212" TEXT="Use inside a function"/>
<node CREATED="1529445035761" ID="ID_460123352" MODIFIED="1529445042993" TEXT="k := 3"/>
</node>
<node CREATED="1529448552471" ID="ID_1049397826" MODIFIED="1529448555031" TEXT="=">
<node CREATED="1529448561988" ID="ID_790839411" MODIFIED="1529448565010" TEXT="var i = 1"/>
</node>
<node CREATED="1529448581546" ID="ID_949639052" MODIFIED="1529448600774" TEXT="Variable&apos;s type is inferred from the value on the right hand side"/>
<node CREATED="1529448660546" ID="ID_1411244830" MODIFIED="1529450805845" TEXT="When the right hand side contains an untyped numeric constant, &#xa;the new variable type depends on the precision of the constant">
<node CREATED="1529450809101" ID="ID_657415737" MODIFIED="1529450843357" TEXT="i := 42 // int&#xa;f := 3.142 // float64&#xa;g := 0.867 + 0.5i // complex128"/>
</node>
</node>
<node CREATED="1529451626529" ID="ID_514022964" MODIFIED="1529451646359" TEXT="Swap variable values">
<node CREATED="1529451635462" ID="ID_1326473321" MODIFIED="1529451640709" TEXT="a, b = b, a"/>
</node>
</node>
<node CREATED="1529446435413" ID="ID_684103972" MODIFIED="1529450895368" TEXT="Constants">
<node CREATED="1529450993247" ID="ID_1237511173" MODIFIED="1529451023518" TEXT="Declare with the const keyword, others are the same as variables">
<node CREATED="1529446459518" ID="ID_177706601" MODIFIED="1529446467494" TEXT="const x string = &quot;Hello&quot;"/>
<node CREATED="1529451185991" ID="ID_456385043" MODIFIED="1529451210585" TEXT="const (&#xa;        Big = 1 &lt;&lt; 100&#xa;        Small = Big &gt;&gt; 99&#xa;)"/>
</node>
<node CREATED="1529451024907" ID="ID_811945275" MODIFIED="1529451037832" TEXT="Constants cannot be declared using the := syntax"/>
<node CREATED="1529451064204" ID="ID_1283267046" MODIFIED="1529451703814" TEXT="Numeric constants">
<node CREATED="1529451126386" ID="ID_592089448" MODIFIED="1529451135424" TEXT="High-precision values"/>
<node CREATED="1529451148228" ID="ID_420629712" MODIFIED="1529451168242" TEXT="Untyped constants take the types needed by the context"/>
</node>
</node>
<node CREATED="1529443802868" ID="ID_368324468" MODIFIED="1529443805257" TEXT="Operators">
<node CREATED="1529451687935" ID="ID_370980032" MODIFIED="1529451697831" TEXT="Arithmetic operators">
<node CREATED="1529451740119" ID="ID_638729227" MODIFIED="1529451820735" TEXT="+, -, *, /, %, &amp;, |, ^, &amp;^, &lt;&lt;, &gt;&gt;"/>
<node CREATED="1529451824018" ID="ID_1058233005" MODIFIED="1529451836335" TEXT="Unary operators: +x, -x, ^x"/>
</node>
<node CREATED="1529451889178" ID="ID_431676986" MODIFIED="1529451894151" TEXT="Comparison operators">
<node CREATED="1529451901856" ID="ID_1761653140" MODIFIED="1529451913959" TEXT="==, !=, &lt;, &lt;=, &gt;, &gt;=">
<node CREATED="1529452089521" ID="ID_1578675601" MODIFIED="1529452140223" TEXT="Complex values are comparable.&#xa;u == v means:&#xa;real(u) == real(v) and imag(u) == imag(v)"/>
<node CREATED="1529452183308" ID="ID_78349360" MODIFIED="1529452197880" TEXT="Pointers to distinct zero-size variables may or may not be equal"/>
</node>
</node>
<node CREATED="1529452408037" ID="ID_1230364539" MODIFIED="1529452413105" TEXT="Logical operators">
<node CREATED="1529452418402" ID="ID_785672916" MODIFIED="1529452430769" TEXT="&amp;&amp;, ||, !"/>
</node>
</node>
</node>
<node CREATED="1529451485551" ID="ID_1733099926" MODIFIED="1529451487245" POSITION="right" TEXT="Pointers"/>
<node CREATED="1529113785660" ID="ID_710905544" MODIFIED="1529113790282" POSITION="right" TEXT="Flow Control"/>
<node CREATED="1529113795786" ID="ID_987127015" MODIFIED="1529113800204" POSITION="right" TEXT="File Operation"/>
<node CREATED="1529113800899" ID="ID_1984710857" MODIFIED="1529113802291" POSITION="right" TEXT="IO"/>
<node CREATED="1529113781222" ID="ID_547852304" MODIFIED="1529442150525" POSITION="left" TEXT="Standard Library Packages">
<node CREATED="1529441650104" ID="ID_712916194" MODIFIED="1529441660313" TEXT="main()"/>
<node CREATED="1529441911196" ID="ID_518903949" MODIFIED="1529442188281" TEXT="import packages">
<node CREATED="1529441925799" ID="ID_464740814" MODIFIED="1529441930519" TEXT="import &quot;package&quot;"/>
<node CREATED="1529441931095" ID="ID_1925577104" MODIFIED="1529442786978" TEXT="import (&#xa;        &quot;package1&quot; &#xa;        &quot;package2&quot;&#xa;)">
<node CREATED="1529446594302" ID="ID_327423350" MODIFIED="1529446600267" TEXT="&quot;factored&quot; import"/>
</node>
<node CREATED="1529453544029" ID="ID_258129791" MODIFIED="1529453549416" TEXT="import s &quot;strings&quot;">
<node CREATED="1529453553817" ID="ID_879268663" MODIFIED="1529453562968" TEXT="Gives the package an alias name"/>
</node>
</node>
<node CREATED="1529442230788" ID="ID_1515489700" MODIFIED="1529442234753" TEXT="exported names">
<node CREATED="1529442241818" ID="ID_206851135" MODIFIED="1529442271174" TEXT="a name begins with a capital letter is exported"/>
<node CREATED="1529442272869" ID="ID_118874788" MODIFIED="1529442311795" TEXT="math.Pi is exported, math.pi is not"/>
</node>
<node CREATED="1529441587032" FOLDED="true" ID="ID_1153203390" MODIFIED="1529441644666" TEXT="fmt">
<node CREATED="1529441619754" ID="ID_1394663648" MODIFIED="1529441625179" TEXT="fmt.Println()"/>
</node>
<node CREATED="1529441596659" ID="ID_1428928674" MODIFIED="1529441597784" TEXT="time"/>
<node CREATED="1529441690469" ID="ID_1535987522" MODIFIED="1529441698402" TEXT="math, rand">
<node CREATED="1529441718917" ID="ID_1294444475" MODIFIED="1529441731195" TEXT="math/rand">
<node CREATED="1529441734753" ID="ID_1489531486" MODIFIED="1529441769156" TEXT="rand.Seed()"/>
<node CREATED="1529441742318" ID="ID_1394092997" MODIFIED="1529441764485" TEXT="rand.Intn()"/>
</node>
<node CREATED="1529442022969" ID="ID_1421817957" MODIFIED="1529442026015" TEXT="math">
<node CREATED="1529442037179" ID="ID_192279492" MODIFIED="1529442043156" TEXT="math.Sqrt()"/>
</node>
</node>
</node>
<node CREATED="1529113826232" ID="ID_45303023" MODIFIED="1529442326399" POSITION="left" TEXT="Functions">
<node CREATED="1529442329412" ID="ID_1982246518" MODIFIED="1529443817837" TEXT="Function Definition">
<node CREATED="1529442445312" ID="ID_234352520" MODIFIED="1529442494924" TEXT="func myfunc()"/>
<node CREATED="1529442496079" ID="ID_1124071157" MODIFIED="1529442757343" TEXT="func myfunc(x int, y int) int {&#xa;        return x + y&#xa;}&#xa;">
<node CREATED="1529442801134" ID="ID_1383847556" MODIFIED="1529443855705" TEXT="Function parameters: type comes after the variable name"/>
<node CREATED="1529443229386" ID="ID_777922514" MODIFIED="1529443864968" TEXT="Consecutive named function parameters share a type: &#xa;        x, y int"/>
</node>
</node>
<node CREATED="1529442860575" ID="ID_637145328" MODIFIED="1529443828501" TEXT="Function Call">
<node CREATED="1529442870841" ID="ID_360844578" MODIFIED="1529442885563" TEXT="myfunc(paramters)"/>
</node>
<node CREATED="1529442900942" ID="ID_822099921" MODIFIED="1529443837075" TEXT="Function Returns">
<node CREATED="1529442912672" ID="ID_289770358" MODIFIED="1529442922521" TEXT="return">
<node CREATED="1529443494864" ID="ID_1744003982" MODIFIED="1529443510992" TEXT="Naked return: return without arguments, returns the named return values">
<node CREATED="1529443518662" ID="ID_1322760357" MODIFIED="1529443883488" TEXT="Naked return statements should be&#xa;used only in short functions"/>
</node>
<node CREATED="1529442996642" ID="ID_135806087" MODIFIED="1529443870585" TEXT="Named return values are treated as variables defined at the top of the function"/>
</node>
<node CREATED="1529443129327" ID="ID_797682902" MODIFIED="1529443157019" TEXT="return x + y"/>
<node CREATED="1529443402576" ID="ID_603323008" MODIFIED="1529443415615" TEXT="return multiple results (any number)">
<node CREATED="1529443425716" ID="ID_12018651" MODIFIED="1529443459028" TEXT="func swap(x, y string) (string, string) {&#xa;        return y, x&#xa;}"/>
</node>
</node>
</node>
<node CREATED="1529113972257" ID="ID_464598403" MODIFIED="1529114011410" POSITION="left" TEXT="Interface"/>
<node CREATED="1529113978430" ID="ID_1450888648" MODIFIED="1529114020157" POSITION="left" TEXT="Concurrency"/>
</node>
</map>
